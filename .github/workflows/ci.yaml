---
name: CI

# yamllint disable-line rule:truthy
on:
  push:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

jobs:
  information:
    name: Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.override.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.4.0
      - name: 🚀 Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1.3.1
      - name: 🚀 Process possible slug override
        id: override
        run: |
          slug="${{ steps.information.outputs.slug }}"
          if [[ ! -z "${{ inputs.slug }}" ]]; then
            slug="${{ inputs.slug }}"
          fi
          echo "::set-output name=slug::$slug"

  # Docker file lint
  lint-hadolint:
    name: Hadolint
    needs:
      - information
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.4.0
      - name: 🚀 Run Hadolint
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: "./${{ needs.information.outputs.target }}/Dockerfile"
          config: ".hadolint"

  lint-markdown:
    name: Markdown lint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.4.0
      - name: 🚀 Run mdl
        uses: actionshub/markdownlint@main
        with:
          args: -v

  lint-shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.4.0
      - name: 🚀 Run Shellcheck
        uses: ludeeus/action-shellcheck@1.1.0
        env:
          SHELLCHECK_OPTS: -s bash

  lint-yamllint:
    name: YAML lint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.4.0
      - name: 🚀 Run YAMLLint
        uses: frenck/action-yamllint@v1.1

  lint-flake8:
    name: Flake8
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.4.0
      - name: 🏗 Set up Python environment
        uses: actions/setup-python@v2.3.1
      - name: 🚀 Run Flake8
        uses: py-actions/flake8@v2

  pytest:
    name: Pytest
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.4.0
      - name: 🏗 Set up Python environment
        uses: actions/setup-python@v2.3.1
      - name: 🏗 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./dropbox_backup/requirements.txt
          pip install -r ./TESTS/test_requirements.txt
      - name: 🚀 Run Pytest
        run: python -m pytest -v --cov

  md-link-check:
    name: Markdown link check
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.4.0
      - name: 🚀 Run Markdown link check
        uses: gaurav-nelson/github-action-markdown-link-check@v1

  lint-json:
    name: JSON Lint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.4.0
      - name: 🚀 Run JQ
        run: |
          shopt -s globstar
          cat **/*.json | jq '.'

  lint-addon:
    name: Add-on lint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2
      - name: 🚀 Run Home Assistant Add-on Lint
        uses: frenck/action-addon-linter@v2.6
        with:
          path: "./dropbox_backup"
          community: false

  build:
    name: Build ${{ matrix.architecture }}
    needs:
      - information
      - lint-hadolint
      - lint-flake8
      - lint-markdown
      - lint-json
      - lint-addon
      - lint-shellcheck
      - lint-yamllint
      - pytest
      - md-link-check

    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}

    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.4.0
      - name: 🏗 Set up build cache
        id: cache
        uses: actions/cache@v2.1.7
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.architecture }}
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "::set-output name=date::$(date +"%Y-%m-%dT%H:%M:%SZ")"
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "${{ needs.information.outputs.build }}")
          echo "::set-output name=from::${from}"
          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "::set-output name=platform::linux/amd64"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "::set-output name=platform::linux/386"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "::set-output name=platform::linux/arm/v6"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "::set-output name=platform::linux/arm/v7"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "::set-output name=platform::linux/arm64/v8"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: ⤵️ Download base image
        run: docker pull "${{ steps.flags.outputs.from }}"
      - name: 🚀 Build
        uses: docker/build-push-action@v2.9.0
        with:
          push: false
          context: ${{ needs.information.outputs.target }}
          file: ${{ needs.information.outputs.target }}/Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/hassio-addons/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:edge
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_NAME=${{ needs.information.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=edge
      # This ugly bit is necessary, or our cache will grow forever...
      # Well until we hit GitHub's limit of 5GB :)
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: 🚚 Swap build cache
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache
